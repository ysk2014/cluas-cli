#!/usr/bin/env node

const chalk = require("chalk");
const program = require("commander");

program.version(require("../package").version).usage("<command> [options]");

program
    .command("create <tpl-name> <app-name>")
    .description("创建工程")
    .option("-c, --clear", "清除所有缓存")
    .action((tpl, app, cmd) => {
        require("../lib/create/index")(tpl, app, cleanArgs(cmd));
    });

program
    .command("add <tpl-name>")
    .description("添加模板")
    .option("-d, --debug", "debug模式下运行")
    .option("-c, --clear", "清除所有缓存")
    .action((name, cmd) => {
        require("../lib/add/index")(name, cleanArgs(cmd));
    });

program.arguments("<command>").action(cmd => {
    program.outputHelp();
    console.log("  " + chalk.red(`Unknown command ${chalk.yellow(cmd)}.`));
    console.log();
});

// add some useful info on help
program.on("--help", () => {
    console.log();
    console.log(
        `  Run ${chalk.cyan("cluas <command> --help")} for detailed usage of given command.`
    );
    console.log();
});

program.commands.forEach(c => c.on("--help", () => console.log()));

program.parse(process.argv);

if (!process.argv.slice(2).length) {
    program.outputHelp();
    process.emit(1);
}

// commander passes the Command object itself as options,
// extract only actual options into a fresh object.
function cleanArgs(cmd) {
    const args = {};
    cmd.options.forEach(o => {
        const key = o.long.replace(/^--/, "");
        // if an option is not present and Command has a method with the same name
        // it should not be copied
        if (typeof cmd[key] !== "function") {
            args[key] = cmd[key];
        }
    });
    return args;
}
